<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Блог разработчика, экспериментатора и гуманиста</title>
    <description>Новости информационной безопасности, статьи о программировании и работе с GNU/Linux
</description>
    <link>http://horopaki.github.io/</link>
    <atom:link href="http://horopaki.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 03 Dec 2017 20:36:38 +0500</pubDate>
    <lastBuildDate>Sun, 03 Dec 2017 20:36:38 +0500</lastBuildDate>
    <generator>Jekyll v3.1.6</generator>
    
      <item>
        <title>Новые приговоры Роману Селезневу в деле о кардинге</title>
        <description>&lt;p&gt;Кардинг это вид преступности, которое состоит в получении информации о банковских реквизитах жертвы, их дубляж и дальнейшее обналичивание средств. Кардинг является трудоемким и наиболее сложным в реализации типом преступления. Когда данные о банковских картах уже похищены, то престпуления могут иметь масштабные последствия. Поэтому жертвами злоумышленников становятся рядовые граждане, мелкие и средние предприниматели. Это плохо.&lt;/p&gt;

&lt;p&gt;Последние события наталкивают на мысль, что судебная система США направлена на устранение киберпреступников, как части общества. Я не собираюсь оправдывать Романа Селезнева, которому грозит 31 год ареста. Но я должен отметить несколько важных моментов.&lt;/p&gt;

&lt;p&gt;Во-первых, в мире информационных технологий банковская сфера плотно завязана с компьютерами. Поэтому, когда маркетологи банковской сферы кричат о безопасности хранения денег в банках, а глобалисты строят мифы о единой валютной системе, то возникает простой вопрос. Как вы дальше собираетесь хранить деньги клиентов, как будете строить и развивать свой банковский бизнес, когда обычный человек может выйти в сеть из Владивостока и всю вашу систему, мягко говоря, поиметь?&lt;/p&gt;

&lt;p&gt;Разумней Романа Селезнева приговорить к исправительным работам на банковскую систему, которую он сумел атаковать. Такие работы позволили бы банкам обратить внимание на свои уязвимости, а Роману обрести смысл жизни, остаться в истории и обеспечить семью. Как плох не был Селезнев, очевидно, он талантливый кардист. Он не талантливый убийца, не талантливый наркоторговец. Он просто талантливый кардист. В чем разница? В том, что знания убийц и наркоторговцев бесполезны для нашего общества, а знания о технических тонкостей взломов кассовых аппаратов и похищения информации помогут улучшить защиту. Длительное тюремное заключение повредит Селезневу и оставит отдел информационной защиты банка без хорошего консультанта.&lt;/p&gt;

&lt;p&gt;Во-вторых. Технически реализовать совершенную защиту в банковской сфере будут мешать законодательные регулятивы, кадровый голод в ИБ, отсутствие актуальных обучающих программ для системных администраторов банковской сферы, языковые барьеры (актуально для крупных банков), дороговизна и сложность расследования преступления, недостаток специалистов в работе с ПЭМИН (канал побочных электромагнитных излучений и наводок) и Tempest (дистанционный сбор информации). Вывод очевидный. Дешевле содержать в штате бывшего кардиста, который не только отрабатывает обвинительный приговор, но и улучшает своими знаниями качество защиты в банковской сфере.&lt;/p&gt;

&lt;p&gt;Роман Селезнев был приговорен к 27 годам. Известные убытки, связанные с преступлениями, приблизительно равны 170 млн долларов. 1 декабря 2017 года журнал Thehackernews опубликовал информацию о новых обвинениях. Это грозит ему задержаться в тюрьме еще на 11 лет. Судья не принял во внимание чистосердечные признания Селезнева, его профессиональные качества и желание сотрудничать. Приговор является одиним из самых суровых, к которому в США не приговаривались даже такие крупные хакеры, как гражданин Украины Роман Вега, получивший 18 лет, или американцы Дэвид Кеймез (20 лет) и Альберто Гонзалес, укравший с сообщниками реквизиты примерно 45 млн кредиток (20 лет).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Берегите себя и не доверяйте свои персональные данные третьим лицам. Будьте внимательны при совершении оплат с банковских карт и помните о двухфакторной аутентификации.&lt;/strong&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 03 Dec 2017 19:50:04 +0500</pubDate>
        <link>http://horopaki.github.io/blog/2017/12/03/roman-seleznev-i-carding.html</link>
        <guid isPermaLink="true">http://horopaki.github.io/blog/2017/12/03/roman-seleznev-i-carding.html</guid>
        
        
        <category>/blog/</category>
        
      </item>
    
      <item>
        <title>Скрипты майнинга могут выполнятся после закрытия браузера</title>
        <description>&lt;p&gt;Как сообщает журнал Thehackernews, найден эффективный способ майнинга криптовалюты в браузерах посетителей сайтов. Майнинг продолжается при закрытии браузера. В списке выполняемых задач остается процесс, ответственный за майнинг.&lt;/p&gt;

&lt;p&gt;Учитывая растущий курс криптовалют, становится ясно, почему администраторам сайтов становится выгодно внедрять сценарии JavaScript для майнинга. Сервисы по добыче криптовалют актуальны среди таких крупных площадок, как The Pirate Bay, который был уличен в использовании Coinhive. Такие технологии заметно прибавляют выгоду владельцам площадок. Они служат дополнительным источником монетизации вместе с баннерной рекламой. Однако, если такие сервисы и позволяли зарабатывать, то только во время прогулок посетителя на сайте. После закрытия браузера, доступ к процессору и связанным с ним ресурсам терялся, что не позволяло продолжить интеллектуальный анализ данных (mining).&lt;/p&gt;

&lt;p&gt;Но, к сожалению, с некоторых пор произошли изменения в работе сценариев для майнинга. Зафиксировали эти изменения в компании Malwarebytes. Они обнаружили, что есть способ сохранить процесс майнинга в фоновом режиме, даже при закрытом браузере. Технология открывает новое скрытое всплывающее окно браузера. Чтобы оставаться незаметным, скрипт не использует всю мощность процессора, а сохраняет средний уровень работы. Впервые технология была зафиксирована в последних версиях браузеров Chrome.&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;Как удалить майнер криптовалют в браузере&lt;/h2&gt;

&lt;p&gt;Первое, что приходит в голову, это отключение скриптов. Однако, если вы любитель роликов на YouTube, или вам срочно нужно открыть свой профиль на headhunter.ru, то без скриптов у вас, скорее всего, ничего не получится.&lt;/p&gt;

&lt;p&gt;По информации Thehackernews, скрипты для майнинга выдают сое присутствие тем, что в панели задач появляется новый значок. Если открыть менеджер задач, то в нем будет присутствовать новый процесс (chrome.exe). По сравнению с процессами, которые ответственны за обычные открытые окна браузера, майнеры больше других нагружают процессор. Если в панели задач появился новый значок и если ваш компьютер начал подтормаживать, то это повод для проверки. Закрывайте все задачи браузеров, которые пожирают мощность процессора. Это не нормальное поведение браузера.&lt;/p&gt;

&lt;p&gt;Дополнительно, есть расширения, которые препятствуют майнингам в браузере. Однако, пока я не готов назвать сколько-нибудь надежный сервис. Thehackernews рекомендует использовать расширение NoCoin, которое доступно в репозиториях GitHub:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/keraf/NoCoin&quot;&gt;https://github.com/keraf/NoCoin&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;C скриптами майнинга должны бороться антивирусы. Но не все владеют платными версиями антивирусов с хорошей технической поддержкой. Если вы не готовы использовать платный антивирус, то стоит обратить внимание на антивирус Clamwin. Он хоть и бесплатный, но полезный, потому что  постоянно обновляет свою базу.&lt;/p&gt;

&lt;p&gt;Для увеличения производительности работы операционной системы рекомендую использовать BleachBit. Эту утилиту можно скачать в официальных репозиториях Linux и на официальном сайте. Использование этих двух программ позволяет уберечь свой компьютер от высплывающих окон и рекламы.&lt;/p&gt;

</description>
        <pubDate>Fri, 01 Dec 2017 15:30:04 +0500</pubDate>
        <link>http://horopaki.github.io/blog/2017/12/01/maining-cryptovalyt-v-brauzere.html</link>
        <guid isPermaLink="true">http://horopaki.github.io/blog/2017/12/01/maining-cryptovalyt-v-brauzere.html</guid>
        
        
        <category>/blog/</category>
        
      </item>
    
      <item>
        <title>Google нашел шпионские программы Tizi для Aндроида</title>
        <description>&lt;p&gt;В попытке защитить пользователей Android от вредоносных приложений, Google постоянно развивается, чтобы отыскать и удалить вредоносные приложения с устройств. На свет вышел новый сервис Google Play Protect.&lt;/p&gt;

&lt;p&gt;Новый сервис Google Play Protect имеет функцию обеспечения безопасности, которая использует машинное обучение для анализа работы приложений и для проверки наличия вредоносных программ. Функция помогла исследователям Google выявить новые виды программ-шпионов для Android, которые крали конфиденциальную информацию о пользователях.&lt;/p&gt;

&lt;p&gt;Первые вредоносные программы Tizi были обнаружены в африканских странах. Они имели полнофункциональный бэкдор, который позволял шпионским программам красть конфиденциональные данные из популярных мессенджеров (Facebook, Твиттер, Whatsapp, Вайбер, Скайп, вконтакте и Телеграмм).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/spy-malware-tizi-statistic.png&quot; alt=&quot;spy-malware-tizi-statistic&quot; title=&quot;Статистика распространения вредосных программ Tizi&quot; /&gt;&lt;/p&gt;

&lt;p&gt;“Команда Google Play Protect обнаружила Tizi в сентябре 2017 года, когда сканеры устройств индентифицировали приложение с возможностями работы в корневой папке устройства. При этом Tizi могли эксплуатировать старые уязвимости”, - говорится в сообщении в блоге Google.&lt;/p&gt;

&lt;p&gt;Команда использовала это приложение, чтобы найти больше похожих на Tizi приложений, старейший из которых функционировал с октября 2015 года. Большинство из этих программ рекламируются в социальных сетях и в малоизвестных магазинах приложений.&lt;/p&gt;
</description>
        <pubDate>Wed, 29 Nov 2017 08:17:04 +0500</pubDate>
        <link>http://horopaki.github.io/blog/2017/11/29/google-play-protect-found-spy-malware-tixi.html</link>
        <guid isPermaLink="true">http://horopaki.github.io/blog/2017/11/29/google-play-protect-found-spy-malware-tixi.html</guid>
        
        
        <category>/blog/</category>
        
      </item>
    
      <item>
        <title>Использование скриптов на сайте. За и против</title>
        <description>&lt;p&gt;Безопасность посетителей сайтов, которые работают на скриптах, постоянно находится под угрозой. Скрипты запускают приложения и алгоритмы на стороне пользователя. Это означает, что когда вы переходите на сайт, который использует скрипт, то вы отдаете свой компьютер в распоряжение неизвестной программы.&lt;/p&gt;

&lt;p&gt;Большую популярность JavaScript получил в браузерах. Причина простая. Надо было придать больше интерактивности веб-страницам (wikipedia). Хотя JavaScript разрабатывался вспешке, во времена, когда думать об интерактивности было рано (94-96 гг.)&lt;/p&gt;

&lt;p&gt;Сама идея, развернуть процесс на клиентской стороне относиться вовсе не к JavaScript. Это идея появилась с появлением сущности client-side-scripting или сценарии, выполненные на стороне клиента. А JavaScript был создан, чтобы упростить работу непрограммистам с интерактивностью. Идея клиентской стороны была заложена в сущности client-side-scripting. Сценарии на стороне клиента меняют поведение интерфейса на определенной веб-странице в ответ на действия мыши или клавиатуры или при определенных событиях синхронизации. Сценарии на стороне клиента также позволяют использовать удаленный сценарий, метод, с помощью которого страница DHTML запрашивает дополнительную информацию с сервера, используя скрытый фрейм, XMLHttpRequests или веб-службу.&lt;/p&gt;

&lt;p&gt;Представим, что выйдя в интернет, мы вышли на прогулку в каком-то итальянском городке. Гуляем по узким проходам между домов. Все спокойно, пока мы заходим на сайты, которые не содержат скрипты и которые зарекомендовали себя, как положительный ресурс (без лишних всплывающих окон и без назойливой рекламы). Все хорошо. Мы продолжаем гулять по узким проулкам. Поворачиваем в сторону. Видим незнакомый ресторан. И решаем посетить его. Кликаем на сайт. Происходит загрузка. Обратите внимание, что на сайтах, где реализуются скрипты загрузка происходит дольше. Сайт открывается. За ним одно всплывающее окно. Второе. Третье. Мы будто оказались в ресторане, полным назойливых официантов.&lt;/p&gt;

&lt;p&gt;В последнее время взламываются большое количество сайтов javascript-библиотек, да и сами библиотеки находятся в зоне риска. Есть вероятность стать помощником в заработке биткоинов, жертвуя техническими мощностями своего ПК неизвестно кому.&lt;/p&gt;

&lt;p&gt;Можно отключить скрипты, оградив себя от неизвестных ресурсов. Да и выполняется JavaScript в песочнице (виртуальная машина, встроенная в браузер). Но в &lt;a href=&quot;http://infoviolence.org/ru/vblog/&quot;&gt;блоге Андрея Столярова&lt;/a&gt; есть очень хорошое видео на эту тему. Называется “безобидный гипертекст”. Основная мысль следующая. JavaScript не экономит сетевой трафик. Об этом часто заявляют создатели ресурсов, работающих на JavaScript, но не упоминают тот факт, что открыть сайт значит обменяться пакетами. Затраты на прохождение пакетов практически не зависят от длины пакетов. Если гипертекст страницы не усложнен, то при переходе на другую страницу сайта, отличающуюся от главной, количество переданных пакетов будет минимальное. Да, JavaScript не перерисовывает всю страницу, но и говорить о “значительной” экономии нельзя. Если бы одной из задачей создателей такого сайта была экономия, то это достигалось бы не за счет подключением JavaScript, а за счет переработки кода всей страницы.&lt;/p&gt;

&lt;p&gt;О безопасности выполнения скриптов в песочнице говорить пока рано, потому что далеко до идеальных сборок браузеров, без backdoor. Проектирование и создание чего-то нового, это тесты, тесты и тесты. Другой вопрос, почему продукты доходят до конечного потребителя с дырами? Использовать или отключать скрипты, - решайте сами. Плохо, что браузеры прячут функцию javascript так далеко, что рядовой пользователь не сразу ее находит.&lt;/p&gt;
</description>
        <pubDate>Fri, 10 Nov 2017 12:27:04 +0500</pubDate>
        <link>http://horopaki.github.io/blog/2017/11/10/ispolzovanie-javascript-na-caite.html</link>
        <guid isPermaLink="true">http://horopaki.github.io/blog/2017/11/10/ispolzovanie-javascript-na-caite.html</guid>
        
        
        <category>/blog/</category>
        
      </item>
    
      <item>
        <title>Права доступа к файлам в Unix</title>
        <description>&lt;p&gt;С файлами и каталогами в Unix связано 12-битное слово, называемое “правами доступа” к файлу. Младшие 9 бит этого слова объединены в 3 группы по 3 бита. Каждая группа задает права доступа для:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Владельца файла;&lt;/li&gt;
  &lt;li&gt;Групп пользователей;&lt;/li&gt;
  &lt;li&gt;Остальных пользователей.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;3 бита в каждой из 3 групп отвечают за право чтения файла (r), право записи (w) и право выполнения (x). Чтобы узнать права доступа к файлам в Unix, мы можем воспользоваться командой:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ls -l&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Например, команда:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ls -l /bin/cat&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Команда возвращает ответ:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-rwxr-xs-r 1 root root 14232 Nov 3 2017 /bin/cat&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Тире (или минус) в начале означает, что мы имеем дело с обычкновенным файлом, буква d означает каталог. Первая группа из 3 букв -rwx- это права для владельца файла (root), это чтение файла (r), запись (w) и исполнение файла (x).
Вторая группа из символов -xs- относится для групп пользователей. А третья группа из одного символа -r- означает право на чтение для всех остальных пользователей.&lt;/p&gt;

&lt;p&gt;Группы из 3 бит равны одной цифре в восьмеричной системы счисления, поэтому частой практикой является указание прав доступа в виде восьмеричного числа, чаще трехзначного (755), но есть и четырехзначное (0755). Они равнозначны.&lt;/p&gt;

&lt;p&gt;Разберем, на примере права доступа (755) или (0755). Это одна и та же запись.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Цифра 7 означает права доступа для владельца файла;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Цифра 5 по середине права для групп пользователей;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Последняя цифра 5 это права доступа для всех остальных пользователей. Эти цифры представляют собой суммы прав на данный файл.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Права на чтение (r) соответствует 4;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Права на запись (w) соответствует 2;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Права на исполнение (x) это 1.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Например, 655 (0655) будет означать, что владелец может читать и перезаписывать (4+2), а группы пользователей и все остальные могут читать и выполнять (4+1).&lt;/p&gt;

&lt;p&gt;Для каталогов интерпритация битов прав доступа немного иная. Права на чтение каталога (r) дают возмонжость просмотреть его содержимое. Права на запись (w)позволяют изменять каталог (создавать или удалять в нем файлы). Право на исполнение (x) для каталога означает возможность каким-либо образом использовать содержимое каталога. Например, открывать файлы, которые находятся внутри него.&lt;/p&gt;

&lt;p&gt;Если на каталог установлены только права на чтения, но нет прав исполнения, мы сможем посмотреть его файлы, но что-то сделать с ними, увы, не сможем. Но, если есть права исполнения, но нет прав чтения, мы можем открыть файл из данного каталога только если знаем точное имя файла. Но узнать его мы не сможем, потому что возможности посмотреть каталог у нас не будет.&lt;/p&gt;

</description>
        <pubDate>Fri, 03 Nov 2017 12:27:04 +0500</pubDate>
        <link>http://horopaki.github.io/blog/2017/11/03/prava-dostupa-v-unix.html</link>
        <guid isPermaLink="true">http://horopaki.github.io/blog/2017/11/03/prava-dostupa-v-unix.html</guid>
        
        
        <category>/blog/</category>
        
      </item>
    
      <item>
        <title>Как повысить свою эффективность в изучении нового языка программирования и не только</title>
        <description>&lt;p&gt;Статья о методе, который помогает повысить свою эффективность в решении повседневных задач. Метод помадора применим к абсолютно любой деятельности. Особую ценность имеет для тех, кто работает перед экраном монитора. Поэтому рассмотрим метод помадора и программирование.&lt;/p&gt;

&lt;p&gt;Помадор это промежуток времени. Обычно это 20-25 минут интенсивной работы или изучение нового языка программирования. Я отключаю все мессенджеры, социальные сети и каналы. Играет легкая классическая музыка. Создается полностью продуктивная атмосфера. Самое интересное наступает после 25 минут. Я делаю пятиминутный перерыв, в ходе которого прекращаю работу за компьютером и отвлекаюсь. Могу провести время на кухне. Ответить на пропущенный звонок. Перерыв длится 5 минут. Затем возвращаемся к работе. Это удобно и эффективно.&lt;/p&gt;

&lt;p&gt;Чтобы осовить новый язык программирования, нужно ответить на вопрос. Для чего этот язык может быть полезен? Суть в том, чтобы разделить обучение на части. Всю вводную часть можно освоить за 2 недели. При условии, что будет использован метод помадора. 25 минут штрудируем и гуглим. 5 минут отдыхаем. Снова 25 минут работаем. И 5 минут отдыхаем.&lt;/p&gt;

&lt;p&gt;Чтобы начать делать первые программы, нужно освоить синтаксис. Я не сторонник заучивать ключевые слова и типы переменных, но компенсирую это тем, что изучаю простые программы (калькулятор, вывести приглашение на экран и др.). Когда возникает вопрос, то обращаюсь к синтаксису. 25 минут на попытку решить задачу. 5 минут отдыха. И снова 25 минут изучения синтаксиса, но уже в конкретном примере. И так пока задача не будет решена.&lt;/p&gt;

&lt;p&gt;Третий этап - чтение литературы. Чтобы ответить на вопросы, которые возникли в ходе освоения синтаксиса нужно читать книги. Вопросы лучше вынести в отдельный список. В популярных языках программирования, 80% задач уже решено. Нормальная практика обращаться к таким решениям, потому что время драгоценно.&lt;/p&gt;

&lt;p&gt;Вопросы, на которые не получается найти ответы, можно задать на форуме. Если ответов нет, то обращаемся к книгам. Можно потратить деньги на печатное издание. Платить за издание в электронном виде считаю неприемлимым шагом, потому что это не просто копия. Это копия, которую нам не пощупать и не полистать. Метод помадора это хороший ход, чтобы улучшить свою продуктивность. Жизнь коротка и нужно многое успеть. Поэтому работать и учиться нужно эффективно. Спасибо, что дочитали!&lt;/p&gt;
</description>
        <pubDate>Wed, 01 Nov 2017 12:27:04 +0500</pubDate>
        <link>http://horopaki.github.io/blog/2017/11/01/kak-povyset-svou-effektivnost.html</link>
        <guid isPermaLink="true">http://horopaki.github.io/blog/2017/11/01/kak-povyset-svou-effektivnost.html</guid>
        
        
        <category>/blog/</category>
        
      </item>
    
      <item>
        <title>Скомпроментирован официальный сайт компании jQuery</title>
        <description>&lt;p&gt;Официальный сайт (blog.jquery.com) компании jQuery, специализирующийся на разработке библиотеки JavaScript был взломан. По информации The Hacker News, информация об этом была опубликована 26 октября из учетной записи Leah Silber. В посте сообщалось, - “Здесь были S.O.A! Взломали str0ng и n3tr1x, передаем привет Caracteros.dll”&lt;/p&gt;

&lt;p&gt;Сайт jQuery работает на CMS WordPress. Нет доказательств того, что был взломан сервер, содержащий библиотеку jQuery. Как крэкерам удалось получить доступ к учетной записи Leah Silber ничего не известно. Он является одним из членов команды jQuery, и врят ли, это шутка принадлежит ему. Пост простоял недолго, после чего его удалил администратор сайта.&lt;/p&gt;

&lt;p&gt;Это не первый случай, когда сайт jQuery остается взломан. Первый раз это произошло в 2014 г. Тогда, если вы заходили на сайт, то вас перенаправляли на другой ресурс, где был набор эксплойтов.&lt;/p&gt;
</description>
        <pubDate>Mon, 23 Oct 2017 12:27:04 +0500</pubDate>
        <link>http://horopaki.github.io/blog/2017/10/23/vzlom-cayta-jquery.html</link>
        <guid isPermaLink="true">http://horopaki.github.io/blog/2017/10/23/vzlom-cayta-jquery.html</guid>
        
        
        <category>/blog/</category>
        
      </item>
    
      <item>
        <title>Браузерный сервис для майнинга Coinhive взломан</title>
        <description>&lt;p&gt;Coinhive - сервис (JS - библиотека), представляющий владельцу сайта возможность незаконно заработать на вычислительных мощностях компьютеров своих посетителей. Неизвестный получил доступ к аккаунту Coinhive в CloudFlare (CDN - сервис), и изменил адреса DNS-серверов. Ему удалось изменить официальный код Coinhive, написанный на JavaScript.&lt;/p&gt;

&lt;p&gt;Пострадали вычислительные мощности компьютеров посетителей сайтов, которые использовали Coinhive для заработка. Крекерам удалось использовать старую брешь в системе при повторной авторизации пользователя, и заменить адреса серверов, чтобы внести изменения в исходный код. Конечной целью взлома системы Coinhive был вывод криптовалюты. Это предположение.&lt;/p&gt;

&lt;p&gt;Официальное заявление представителей Coinhive было следующим. “Вечером, 23 октября примерно в десять вечера, наша учетная запись для DNS-провайдера стала доступна злоумышленнику. Записи были обработаны для перенаправления запросов на сторонний сервер”.&lt;/p&gt;
</description>
        <pubDate>Tue, 10 Oct 2017 12:27:04 +0500</pubDate>
        <link>http://horopaki.github.io/blog/2017/10/10/vzloman-servis-mayninga.html</link>
        <guid isPermaLink="true">http://horopaki.github.io/blog/2017/10/10/vzloman-servis-mayninga.html</guid>
        
        
        <category>/blog/</category>
        
      </item>
    
  </channel>
</rss>
